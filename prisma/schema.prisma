// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  name          String        @db.VarChar(128)
  email         String        @unique
  phoneNumber   String        @db.VarChar(24)
  accountStatus AccountStatus @default(CREATED)
  password      String        @db.VarChar(128)
  salt          String        @db.VarChar(255)
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
  profile       Profile?
  notes         Note[]
  libraries     Library[]
  posts         Post[]
  comments      Comment[]
  postLikes     PostLike[]
  commentLikes  CommentLike[]

  @@map("user")
}

model Profile {
  id               String    @id @default(uuid()) @db.Uuid
  gender           String?   @db.VarChar(32)
  birthday         DateTime?
  profilePicture   String?   @db.VarChar(128)
  coverPicture     String?   @db.VarChar(128)
  timeZone         String?   @db.VarChar(64)
  bio              String?   @db.VarChar(512)
  favoriteAuthor   String?   @db.VarChar(64)
  favoriteBook     String?   @db.VarChar(128)
  favoriteGenres   String[]
  centerOfInterest String[]
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique @db.Uuid

  @@map("profile")
}

model Book {
  id              String    @id @default(uuid()) @db.Uuid
  title           String    @db.VarChar(255)
  subtitle        String    @db.VarChar(255)
  isbn            String?   @db.VarChar(64)
  authors         String[]
  pageCount       Int
  summary         String?
  illustration    String?   @db.VarChar(255)
  publicationDate DateTime?
  publisher       String    @db.VarChar(128)
  edition         String?   @db.VarChar()
  editors         String[]
  language        String    @db.VarChar()
  genre           String    @db.VarChar(64)
  tags            String[]
  dimensions      String?   @db.VarChar(128)
  notes           Note[]
  libraries       Library[]
  posts           Post[]

  @@map("book")
}

model Note {
  id         String   @id @default(uuid()) @db.Uuid
  reference  String   @db.VarChar(128)
  type       NoteType @default(NOTE)
  text       String
  isPublic   Boolean  @default(false)
  attachment String?  @db.VarChar(255)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  book       Book?    @relation(fields: [bookId], references: [id])
  bookId     String?  @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("note")
}

model Library {
  id                    String    @id @default(uuid()) @db.Uuid
  status                String    @db.VarChar(64)
  stopOn                String?   @db.VarChar(128)
  readingCompletionDate DateTime? @db.Date
  rating                Int?
  user                  User      @relation(fields: [userId], references: [id])
  userId                String    @db.Uuid
  book                  Book      @relation(fields: [bookId], references: [id])
  bookId                String    @db.Uuid
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("library")
}

model Post {
  id        String     @id @default(uuid()) @db.Uuid
  text      String
  reference String     @db.VarChar(128)
  medias    String[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.Uuid
  book      Book?      @relation(fields: [bookId], references: [id])
  bookId    String?    @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  likes     PostLike[]

  @@map("post")
}

model Comment {
  id        String        @id @default(uuid()) @db.Uuid
  parentId  String?       @unique @db.Uuid
  parent    Comment?      @relation("parentComment", fields: [parentId], references: [id])
  text      String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String        @db.Uuid
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]
  children  Comment[]     @relation("parentComment")

  @@index([parentId])
  @@map("comment")
}

model PostLike {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@map("postlike")
}

model CommentLike {
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([commentId, userId])
  @@map("commentlike")
}

enum Role {
  USER
  ADMIN
}

enum NoteType {
  NOTE
  QUOTE
}

enum AccountStatus {
  CREATED
  ACTIVATED
  SUSPENDED
}
